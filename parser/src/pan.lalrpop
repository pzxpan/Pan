use num_bigint::BigInt;
use num_traits::{ToPrimitive};
use crate::ast::*;
use crate::lexer::{Token, LexicalError, CommentType};
use crate::doc::tags;
use lalrpop_util::ErrorRecovery;

grammar<'input,'err>(input: &'input str, file_no: usize,errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, LexicalError>>);

pub SourceUnit: SourceUnit = {
    SourceUnitPart+ => SourceUnit(<>)
}

SourceUnitPart: SourceUnitPart = {
    StructDefinition => SourceUnitPart::StructDefinition(<>),
    ImportDirective => SourceUnitPart::ImportDirective(<>),
    EnumDefinition => SourceUnitPart::EnumDefinition(<>),
    DataDefinition => SourceUnitPart::DataDefinition(<>),
    FunctionDefinition => SourceUnitPart::FunctionDefinition(<>),
    BoundDefinition => SourceUnitPart::BoundDefinition(<>),
    <err: !>  => { errors.push(err); SourceUnitPart::Error},
}

ImportDirective: Import = {
    "import" <s:Dot<Identifier>> <all:(".*")?> ";" => Import::Plain(s,all.is_some()),
    "import" <s:Dot<Identifier>> <all:(".*")?> "as" <id:Identifier> ";" => Import::GlobalSymbol(s, id,all.is_some()),
    "import" <s:Dot<Identifier>> "{" <rename:CommaOne<ImportRename>> "}" ";" => {
        Import::Rename(s, rename)
    }
}

ImportRename: (Vec<Identifier>, Option<Identifier>) = {
    <n:Dot<Identifier>> => (n, None),
    <from:Dot<Identifier>> "as" <to:Identifier> => (from, Some(to)),
}


DocComments: Vec<DocComment> = {
    SingleDocComment* => tags(&<>)
}

SingleDocComment: (usize, CommentType, &'input str)= {
    <l:@L> <c:DocComment> => (l, c.0, c.1)
}


ArrayDimension: Option<Expression> = {
    "[" "]" => None,
    "[" <Expression> "]" => Some(<>)
}

Identifier: Identifier = {
    <l:@L> <n:LexIdentifier> <r:@R> => Identifier{loc: Loc(file_no, l, r), name: n.to_string()}
}

VariableDeclaration: VariableDeclaration = {
    <l:@L> <ty:Precedence0> <name:Identifier> <r:@R> => VariableDeclaration {
        loc: Loc(file_no, l, r), ty:Some(ty), name
    },
    <l:@L> "let" <name:Identifier>  <ty: (":" Precedence0)?> <r:@R> => VariableDeclaration {
            loc: Loc(file_no, l, r), ty:ty.map(|x|x.1), name
    },

}

MultiDeclarationPart: MultiDeclarationPart = {
       <i:Identifier> ":" <m:MultiVariableDeclaration> => MultiDeclarationPart::Struct(i,m),
      <m:MultiVariableDeclaration>  => MultiDeclarationPart::TupleOrArray(m),
       <i:Identifier> => MultiDeclarationPart::Single(i),

}
MultiVariableDeclaration: MultiVariableDeclaration = {
    <l:@L>  "[" <variables:Comma<MultiDeclarationPart>> "]"  <r:@R> => MultiVariableDeclaration {
         loc: Loc(file_no, l, r), variables,destruct_ty: DestructType::Array,
    },
    <l:@L>  "(" <variables:Comma<MultiDeclarationPart>> ")"  <r:@R> => MultiVariableDeclaration {
         loc: Loc(file_no, l, r), variables,destruct_ty: DestructType::Tuple,
     },
     <l:@L>  "{" <variables:Comma<MultiDeclarationPart>> "}"  <r:@R> => MultiVariableDeclaration {
         loc: Loc(file_no, l, r), variables,destruct_ty: DestructType::Struct,
    },
}

DataDefinition: Box<DataDefinition> = {
    <doc:DocComments> <l:@L> "data" <name:Identifier> "{" <fields:(DataVariableDefinition)*> "}" <r:@R> => {
        Box::new(DataDefinition{loc: Loc(file_no, l, r), doc, name, fields})
     }
}

StructTy: StructTy = {
    <l:@L> "struct" <r:@R> => StructTy::Struct(Loc(file_no, l, r)),
}

StructPart: StructPart = {
    StructVariableDefinition => StructPart::StructVariableDefinition(<>),
    FunctionDefinition => StructPart::FunctionDefinition(<>),
}
EnumPart: EnumPart = {
    EnumVariableDefinition => EnumPart::EnumVariableDefinition(<>),
    FunctionDefinition => EnumPart::FunctionDefinition(<>),
}

Generics: Vec<Generic> = {
    => Vec::new(),
    "<" <CommaOne<Generic>> ">" => <>,
}

Generic: Generic = {
    <l:@L> <name:Identifier> <bounds: (":" <Identifier>)?> <r:@R> => {
        if bounds.is_some() {
            Generic {
                loc: Loc(file_no, l, r),
                name,
                bounds:Some(bounds.unwrap())
            }
        } else {
             Generic {
                loc: Loc(file_no, l, r),
                name,
                bounds:None
             }
       }
    }
}

StructDefinition: Box<StructDefinition> = {
    <doc:DocComments> <l:@L> <is_pub:"pub"?> <ty:StructTy> <name:Identifier> <generics:Generics> <im: ("impl" <CommaOne<Precedence0>>)?>
    "{" <parts:(<StructPart>)*> "}"  <r:@R> => {
        let is_pub = is_pub.is_some();
        Box::new(StructDefinition{doc, loc: Loc(file_no, l, r), ty, name, is_pub,generics, parts,impls:im})
    }
}

BoundDefinition: Box<BoundDefinition> = {
     <doc:DocComments> <l:@L> <is_pub:"pub"?> "bound" <name:Identifier> <generics:Generics>
     "{" <parts:(<FunctionDefinition>)*> "}"  <r:@R> => {
           let is_pub = is_pub.is_some();
           Box::new(BoundDefinition{doc, loc: Loc(file_no, l, r), name, is_pub,generics, parts})
     }
}
EnumDefinition: Box<EnumDefinition> = {
    <doc:DocComments> <l:@L> <is_pub:"pub"?> "enum" <name:Identifier> <generics:Generics> <im: ("impl" <CommaOne<Precedence0>>)?> "{" <parts:(<EnumPart>)*> "}" <r:@R> => {
        let is_pub = is_pub.is_some();
        Box::new(EnumDefinition{loc: Loc(file_no, l, r), doc, name, generics,parts,is_pub,impls:im})
    }
}

StructVariableDefinition: Box<StructVariableDefinition> = {
    <doc:DocComments> <l:@L> <is_pub:"pub"?>  <name:Identifier> ":" <ty:Precedence0> <e:("=" <Expression>)?> <r:@R> "," => {
        let is_pub = is_pub.is_some();
        Box::new(StructVariableDefinition {
            doc, loc: Loc(file_no, l, r), ty, is_pub, name, initializer: e,
        })
    },
}

EnumVariableDefinition: Box<EnumVariableDefinition> = {
    <doc:DocComments> <l:@L>  <name:Identifier> <tys : ("(" <Comma<Expression>>  ")" )?> <r:@R> ","? => {
     Box::new(EnumVariableDefinition {
         doc, loc: Loc(file_no, l, r), tys, name
        })
    },
}

DataVariableDefinition: Box<StructVariableDefinition> = {
    <doc:DocComments> <l:@L>  <name:Identifier> ":" <ty:Precedence0> <e:("=" <Expression>)?> <r:@R> "," => {
        Box::new(StructVariableDefinition {
            doc, loc: Loc(file_no, l, r), ty, is_pub:true, name, initializer: e,
        })
    },
}

Visibility: Visibility = {
    <l:@L> "public" <r:@R> => Visibility::Public(Loc(file_no, l, r)),
    <l:@L> "private" <r:@R> => Visibility::Private(Loc(file_no, l, r)),
}

VariableAttribute: VariableAttribute = {
    Visibility => VariableAttribute::Visibility(<>),
    <l:@L> "constant" <r:@R> => VariableAttribute::Constant(Loc(file_no, l, r))
}

Expression: Expression = {
    Precedence15,
}

Precedence15: Expression = {
    <l:Precedence13> <a:@L> "=" <b:@R> <r:Precedence15> => Expression::Assign(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "|=" <b:@R> <r:Precedence15> => Expression::AssignOr(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "^=" <b:@R> <r:Precedence15> => Expression::AssignXor(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "&=" <b:@R> <r:Precedence15> => Expression::AssignAnd(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "<<=" <b:@R> <r:Precedence15> => Expression::AssignShiftLeft(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> ">>=" <b:@R> <r:Precedence15> => Expression::AssignShiftRight(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "+=" <b:@R> <r:Precedence15> => Expression::AssignAdd(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "-=" <b:@R> <r:Precedence15> => Expression::AssignSubtract(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "*=" <b:@R> <r:Precedence15> => Expression::AssignMultiply(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "/=" <b:@R> <r:Precedence15> => Expression::AssignDivide(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "%=" <b:@R> <r:Precedence15> => Expression::AssignModulo(Loc(file_no, a, b), Box::new(l), Box::new(r)),

    Precedence13,
}



Precedence13: Expression = {
  <l:@L> "if" <cond:Precedence13> ":" <body:Precedence12> <s2:("elif" <Precedence13> ":" <Precedence12>)*> <el:("else" ":"  <Precedence12>)> <r:@R> => {
                let mut s3 = el;
                for i in s2.into_iter().rev() {
                   s3 = Expression::IfExpression(Loc(file_no, l, r), Box::new(i.0), Box::new(i.1), Box::new(s3));
                }
                Expression::IfExpression(Loc(file_no, l, r), Box::new(cond), Box::new(body), Box::new(s3))
    },
    <l:Precedence13> <a:@L> "||" <b:@R> <r:Precedence12> => Expression::Or(Loc(file_no, a, b), Box::new(l), Box::new(r)),

    Precedence12,
}

Precedence12: Expression = {
    <l:Precedence12> <a:@L> "&&" <b:@R> <r:Precedence11> => Expression::And(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence11,
}

Precedence11: Expression = {
    <l:Precedence11> <a:@L> "==" <b:@R> <r:Precedence10> => Expression::Equal(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence11> <a:@L> "!=" <b:@R> <r:Precedence10> => Expression::NotEqual(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence10,
}

Precedence10: Expression = {
    <l:Precedence10> <a:@L> "<" <b:@R> <r:Precedence9> => Expression::Less(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence10> <a:@L> ">" <b:@R> <r:Precedence9> => Expression::More(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence10> <a:@L> "<=" <b:@R> <r:Precedence9> => Expression::LessEqual(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence10> <a:@L> ">=" <b:@R> <r:Precedence9> => Expression::MoreEqual(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence9,
}

Precedence9: Expression = {
    <l:Precedence9> <a:@L> "|" <b:@R> <r:Precedence8> => Expression::BitwiseOr(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence8,
}

Precedence8: Expression = {
    <l:Precedence8> <a:@L> "^" <b:@R> <r:Precedence7> => Expression::BitwiseXor(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence7,
}

Precedence7: Expression = {
    <l:Precedence7> <a:@L> "&" <b:@R> <r:Precedence6> => Expression::BitwiseAnd(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence6,
}

Precedence6: Expression = {
    <l:Precedence6> <a:@L> "<<" <b:@R> <r:Precedence5> => Expression::ShiftLeft(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence6> <a:@L> ">>" <b:@R> <r:Precedence5> => Expression::ShiftRight(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence5,
}

Precedence5: Expression = {
    <l:Precedence5> <a:@L> "+" <b:@R> <r:Precedence4> => Expression::Add(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence5> <a:@L> "-" <b:@R> <r:Precedence4> => Expression::Subtract(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence4,
}

Precedence4: Expression = {
    <l:Precedence4> <a:@L> "*" <b:@R> <r:Precedence3> => Expression::Multiply(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence4> <a:@L> "/" <b:@R> <r:Precedence3> => Expression::Divide(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence4> <a:@L> "%" <b:@R> <r:Precedence3> => Expression::Modulo(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <e:Precedence4> <a:@L>  "as" <b:@R> <target:Precedence3> => Expression::As(Loc(file_no, a, b),Box::new(e),Box::new(target)),
    Precedence3,
}

Precedence3: Expression = {
    <l:Precedence3> <a:@L> "**" <b:@R> <r:Precedence2> => Expression::Power(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence2,
}

Precedence2: Expression = {
    <a:@L> "!" <b:@R> <e:Precedence2> => Expression::Not(Loc(file_no, a, b), Box::new(e)),
    <a:@L> "+" <b:@R> <e:Precedence2> => Expression::UnaryPlus(Loc(file_no, a, b), Box::new(e)),
    <a:@L> "-" <b:@R> <e:Precedence2> => Expression::UnaryMinus(Loc(file_no, a, b), Box::new(e)),

    Precedence0,
}

NamedArgument: NamedArgument = {
    <l:@L> <name:Identifier> <expr: (":" <Expression>)?> <r:@R> => {
        if expr.is_some() {
            NamedArgument{ loc: Loc(file_no, l, r), name, expr: expr.unwrap() }
        } else {
            NamedArgument{ loc: Loc(file_no, l, r), name: name.clone(), expr: Expression::Variable(name.clone()) }
        }
    },
}

DictEntry: DictEntry = {
    <l:@L> <key:StringLiteral+> ":" <value:Expression> <r:@R> => {
        DictEntry{ loc: Loc(file_no, l, r),key:Expression::StringLiteral(key), value }
    },
    <l:@L> <n:LexNumber> ":" <value:Expression> <r:@R> => {
        let s: String = n.chars().filter(|v| *v != '_').collect();
        let num = s.parse::<BigInt>().unwrap().to_i32().unwrap();
        let key = Expression::NumberLiteral(Loc(file_no, l, r), num);
        DictEntry{ loc: Loc(file_no, l, r),key, value }
     }
}


FunctionCall: Expression = {
    <a:@L> <i:Precedence0> "(" <v:Comma<Expression>> ")" <b:@R> => {
        Expression::FunctionCall(Loc(file_no, a, b), Box::new(i), v)
    },
    <a:@L> <i:Precedence0> "(" "{" <v:Comma<NamedArgument>> "}" ")" <b:@R> => {
            Expression::NamedFunctionCall(Loc(file_no, a, b), Box::new(i), v)
    },
}
ObjAttribute: Expression = {
    <a:@L> <e:Precedence0> "."  <i:Identifier> <b:@R> => {
        Expression::Attribute(Loc(file_no, a, b), Box::new(e),Some(i), None)
     },
     <a:@L> <e:Precedence0> "."  <n:LexNumber> <b:@R> => {
        let s: String = n.chars().filter(|v| *v != '_').collect();
        let num = s.parse::<BigInt>().unwrap().to_i32().unwrap();
        Expression::Attribute(Loc(file_no, a, b), Box::new(e), None, Some(num))
     },
     <a:@L> <e:Precedence0> "::"  <i:Identifier> <b:@R> => {
        Expression::Attribute(Loc(file_no, a, b), Box::new(e),Some(i), None)
     },
}

Precedence0: Expression = {
    <FunctionCall> => <>,
    <ObjAttribute> => <>,
    <a:@L> <e:Precedence0> "[" <i:Expression> "]" <b:@R> => Expression::Subscript(Loc(file_no, a, b), Box::new(e), Box::new(i)),
    <a:@L> "true" <b:@R> => Expression::BoolLiteral(Loc(file_no, a, b), true),
    <a:@L> "false" <b:@R> => Expression::BoolLiteral(Loc(file_no, a, b), false),
    <StringLiteral+> => Expression::StringLiteral(<>),

    <a:@L> "[" <v:CommaOne<Expression>> "]" <b:@R> => {
        Expression::ArrayLiteral(Loc(file_no, a, b), v)
    },
    <a:@L> "(" <v:CommaOne<Expression>> ")" <b:@R> => {
        Expression::Tuple(Loc(file_no, a, b), v)
     },
    <Identifier> => Expression::Variable(<>),

    <a:@L> <n:Number>  <b:@R> => Expression::Number(Loc(file_no, a, b),n),
    <l:@L> <n:LexNumber> <r:@R> => {
        let s: String = n.chars().filter(|v| *v != '_').collect();
        let num = s.parse::<BigInt>().unwrap().to_i32().unwrap();
        Expression::NumberLiteral(Loc(file_no, l, r), num)
    },
    <l:@L> <a:ParameterList> <r:@R> => {
        if a.len() == 1 {
            if let Some(Parameter{ ty,  name: None, .. }) = &a[0].1 {
                return ty.clone();
            }
        }

        Expression::List(Loc(file_no, l, r), a)
    },

   <l:@L> "{" <v:CommaOne<DictEntry>> "}" <r:@R> => Expression::Dict(Loc(file_no, l, r), v),
    <LambdaDefinition> => <>,
    <!> => {errors.push(<>); Expression::Error}
}

Number: Number = {
    <value:i8> =>  Number::I8(value),
    <value:i16> =>  Number::I16(value),
    <value:i32> =>  Number::I32(value),
    <value:i64> =>  Number::I64(value),
    <value:i128> => Number::I128(value),
    <value:isize> => Number::ISize(value),
    <value:u8> => Number::U8(value),
    <value:u16> => Number::U16(value),
    <value:u32> => Number::U32(value),
    <value:u64> => Number::U64(value),
    <value:u128> => Number::U128(value),
    <value:usize> => Number::USize(value),
    <value:float> => Number::Float(value),
    <value:char> => Number::Char(value),
};

StringLiteral: StringLiteral = {
    <l:@L> <s:LexStringLiteral> <r:@R> => {
        StringLiteral{ loc: Loc(file_no, l, r), string: s.to_string() }
    }
}

Parameter: Parameter = {
    <l:@L><name:Identifier?> ":"  "ref"  <ty:Expression>   <r:@R> => {
        let loc = Loc(file_no, l, r);
        Parameter{loc, ty, is_ref:true, is_mut: false, name,default:None}
    },

    <l:@L><name:Identifier?> ":" <ty:Precedence0> <e:("=" <Expression>)?> <r:@R> => {
        let loc = Loc(file_no, l, r);
        Parameter{loc, ty, is_ref:false, is_mut: false, name,default:e}
    }
}

OptParameter: (Loc, Option<Parameter>) = {
    <l:@L> <p:Parameter?> <r:@R> => (Loc(file_no, l, r), p),
}

ParameterList: Vec<(Loc, Option<Parameter>)> = {
    "(" ")" => Vec::new(),
    "(" <l:@L> <p:Parameter> <r:@R> ")" => vec!((Loc(file_no, l, r), Some(p))),
    "(" <CommaTwo<OptParameter>> ")" => <>,
}

StateMutability: StateMutability = {
    <l:@L> "pure" <r:@R> => StateMutability::Pure(Loc(file_no, l, r)),
    <l:@L> "view" <r:@R> => StateMutability::View(Loc(file_no, l, r)),
    <l:@L> "payable" <r:@R> => StateMutability::Payable(Loc(file_no, l, r)),
}

FunctionAttribute: FunctionAttribute = {
    StateMutability => FunctionAttribute::StateMutability(<>),
    Visibility => FunctionAttribute::Visibility(<>),
}

BlockStatementOrSemiColon: Option<Statement> = {
    <@L> <@R> ";" => None,
    BlockStatement => Some(<>),
}


FunctionDefinition: Box<FunctionDefinition> = {
    <doc:DocComments> <is_pub:"pub"?> <l:@L> "fun"  <nl:@L> <is_static: "::"?> <name:Identifier?> <nr:@R> <generics:Generics> <params:ParameterList>
    <returns:(":" Expression)?> <body:BlockStatementOrSemiColon> <r:@R> => {
        let is_pub = is_pub.is_some();
        let is_static = is_static.is_some();
        Box::new(FunctionDefinition {
            doc,
            loc: Loc(file_no, l, r),
            name,
            name_loc: Loc(file_no, nl, nr),
            params,
            is_pub,
            generics,
            is_static,
            returns:returns.map(|x|x.1),
            body,
        })
    },
}

LambdaDefinition: Expression = {
   <l:@L> <params:ParameterList>  "=>" <body:BlockStatement> <r:@R> =>
    {
       Expression::Lambda(Loc(file_no, l, r),
       Box::new(LambdaDefinition{
            loc:Loc(file_no, l, r),
            params,
            body: Box::new(body),
       }))
    }
}

BlockStatement: Statement = {
    <l:@L> "{" <s:Statement*> "}" <r:@R> => Statement::Block(Loc(file_no, l, r), s),
    <l:@L> "{" <v:CommaOne<NamedArgument>> "}" <r:@R> => Statement::Args(Loc(file_no, l, r), v),
}

Statement: Statement = {
   NonIfStatement,
   <l:@L> "if" <cond:Precedence13> <body:BlockStatement> <s2:("elif" <Precedence13> <BlockStatement>)*> <el:("else" BlockStatement)?> <r:@R> => {
         if el.is_some() {
            let mut s3 = el.map(|s|s.1).unwrap();
            for i in s2.into_iter().rev() {
                s3 = Statement::If(Loc(file_no, l, r), i.0, Box::new(i.1), Some(Box::new(s3)));
            }
            Statement::If(Loc(file_no, l, r), cond, Box::new(body), Some(Box::new(s3)))
         } else {
            if s2.len() > 0 {
                let a = s2.last().unwrap();
                let mut s3 = Statement::If(Loc(file_no, l, r), a.0.clone(), Box::new(a.1.clone()), None);
                for i in s2.into_iter().rev().skip(1) {
                   s3 = Statement::If(Loc(file_no, l, r), i.0, Box::new(i.1), Some(Box::new(s3)));
                }
                Statement::If(Loc(file_no, l, r), cond, Box::new(body), Some(Box::new(s3)))
            } else {
               Statement::If(Loc(file_no, l, r), cond, Box::new(body), None)
            }
         }
      },
   <l:@L> "while"  <e:Expression>  <b:BlockStatement> <r:@R> => {
      Statement::While(Loc(file_no, l, r), e, Box::new(b))
    },
   <l:@L> "for"  <b:Expression>  "in"  <c:Expression> <d: (".." <Expression>)?> <block:BlockStatement> <r:@R> => {
      Statement::For(Loc(file_no, l, r), b, c, d,Some(Box::new(block)))
   },
   <l:@L> "match"  <e:Expression>  "{" <b1:( <Expression> "->"  <Statement>)*> "}" <r:@R> => {
        let a = b1.iter().map(|s| (Box::new(s.0.clone()),Box::new(s.1.clone()))).collect();
        Statement::Match(Loc(file_no, l, r),e,a)
   }
}

SimpleStatement: Statement = {
    <l:@L>  <v:VariableDeclaration> <e:("=" <Expression>)?> <r:@R> => {
        Statement::VariableDefinition(Loc(file_no, l, r), v, e)
    },
    //Set放在这里就没法嵌套定义，只能在"="的右边推导出一个Set;放在Expression的话，与NamedArgument有规约冲突
    <l:@L>  <v:VariableDeclaration> "="  <ll:@L> "{" <vv:CommaOne<Expression>> "}" <rr:@R> <r:@R> => {
         Statement::VariableDefinition(Loc(file_no, l, r), v, Some(Expression::Set(Loc(file_no, ll, rr), vv)))
     },
     <l:@L> "let" <v:MultiVariableDeclaration> "=" <e:Expression> <r:@R> => {
            Statement::MultiVariableDefinition(Loc(file_no, l, r), v, e)
        },
    <l:@L> <e:Expression> <r:@R> => {
        Statement::Expression(Loc(file_no, l, r), e)
    }
}

NonIfStatement: Statement = {
    BlockStatement => <>,
    <SimpleStatement> ";" => <>,
    <l:@L> "continue" <r:@R> ";" => {
        Statement::Continue(Loc(file_no, l, r))
    },
    <l:@L> "break" <r:@R> ";" => {
        Statement::Break(Loc(file_no, l, r))
    },
    <l:@L> "return" <r:@R> ";" => {
        Statement::Return(Loc(file_no, l, r), None)
    },
    <l:@L> "return" <e:Expression> <r:@R> ";" => {
        Statement::Return(Loc(file_no, l, r), Some(e))
    },
}

Dot<T>: Vec<T> = {
    => Vec::new(),
    DotOne<T> => <>,
};

DotOne<T>: Vec<T> = {
    <e:T> <v:("." <T>)*>  => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

Comma<T>: Vec<T> = {
    => Vec::new(),
    CommaOne<T> => <>,
};

CommaOne<T>: Vec<T> = {
    <e:T> <v:("," <T>)*>  => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

CommaTwo<T>: Vec<T> = {
    <e:T> <v:("," <T>)+>  => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        LexIdentifier => Token::Identifier(<&'input str>),
        LexStringLiteral => Token::StringLiteral(<&'input str>),
        LexNumber => Token::Number(<&'input str>),
        ";" => Token::Semicolon,
        ".." => Token::TwoDot,
        ".*" => Token::All,
        "::" => Token::TwoColon,
        "ref" => Token::ReadOnlyRef,
        "{" => Token::OpenCurlyBrace,
        "}" => Token::CloseCurlyBrace,
        "(" => Token::OpenParenthesis,
        ")" => Token::CloseParenthesis,
        "=" => Token::Assign,
        "==" => Token::Equal,
        "=>" => Token::Arrow,
        "->" => Token::ThinArrow,
        "|=" => Token::BitwiseOrAssign,
        "^=" => Token::BitwiseXorAssign,
        "&=" => Token::BitwiseAndAssign,

        "<<=" => Token::ShiftLeftAssign,
        ">>=" => Token::ShiftRightAssign,

        "+=" => Token::AddAssign,
        "-=" => Token::SubtractAssign,
        "*=" => Token::MulAssign,
        "/=" => Token::DivideAssign,
        "%=" => Token::ModuloAssign,

        "?" => Token::Question,
        ":" => Token::Colon,
        "||" => Token::Or,
        "&&" => Token::And,
        "!=" => Token::NotEqual,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        ">" => Token::More,
        ">=" => Token::MoreEqual,
        "|" => Token::BitwiseOr,
        "&" => Token::BitwiseAnd,
        "^" => Token::BitwiseXor,
        "<<" => Token::ShiftLeft,
        ">>" => Token::ShiftRight,
        "+" => Token::Add,
        "-" => Token::Subtract,
        "*" => Token::Mul,
        "/" => Token::Divide,
        "%" => Token::Modulo,
        "**" => Token::Power,
        "!" => Token::Not,
        "~" => Token::Complement,
        "++" => Token::Increment,
        "--" => Token::Decrement,
        "[" => Token::OpenBracket,
        "]" => Token::CloseBracket,
        "." => Token::Member,
        "," => Token::Comma,
        DocComment => Token::DocComment(<CommentType>, <&'input str>),
        float => Token::Float(<f64>),
        i8 => Token::I8(<i8>),
        i16 => Token::I16(<i16>),
        i32 => Token::I32(<i32>),
        i64 => Token::I64(<i64>),
        i128 => Token::I128(<i128>),
        isize => Token::ISize(<isize>),
         u8 => Token::U8(<u8>),
        u16 => Token::U16(<u16>),
        u32 => Token::U32(<u32>),
        u64 => Token::U64(<u64>),
        u128 => Token::U128(<u128>),
        char => Token::Char(<char>),
        usize => Token::USize(<usize>),
        "data" => Token::Data,
        "import" => Token::Import,
        "struct" => Token::Struct,

        "bool" => Token::Bool,

        "string" => Token::String,
        "bound" => Token::Bound,

        "enum" => Token::Enum,
        "public" => Token::Public,
        "private" => Token::Private,

        "constant" => Token::Constant,
        "true" => Token::True,
        "false" => Token::False,
        "pure" => Token::Pure,
        "view" => Token::View,
        "payable" => Token::Payable,
        "constructor" => Token::Constructor,
        "fun" => Token::Function,
        "return" => Token::Return,
        "if" => Token::If,
        "match" => Token::Match,
        "for" => Token::For,
        "while" => Token::While,
        "else" => Token::Else,
        "elif" => Token::Elif,
        "continue" => Token::Continue,
        "break" => Token::Break,

        "as" => Token::As,
        "from" => Token::From,
        "is" => Token::Is,
        "impl" => Token::Impl,
        "let" => Token::Let,
        "in" => Token::In,
        "pub" => Token::Pub,
        "lambda" => Token::Lambda,
    }
}
