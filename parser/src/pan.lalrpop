use std::str::FromStr;
use num_bigint::BigInt;
use crate::ast::*;
use crate::box_option;
use crate::lexer::{Token, LexicalError, CommentType};
use crate::doc::tags;

grammar<'input>(input: &'input str, file_no: usize);

pub SourceUnit: SourceUnit = {
    SourceUnitPart+ => SourceUnit(<>)
}

SourceUnitPart: SourceUnitPart = {
    StructDefinition => SourceUnitPart::StructDefinition(<>),
    ImportDirective => SourceUnitPart::ImportDirective(<>),
    EnumDefinition => SourceUnitPart::EnumDefinition(<>),
    DataDefinition => SourceUnitPart::DataDefinition(<>),
}

ImportDirective: Import = {
    "import" <s:StringLiteral> ";" => Import::Plain(s),
    "import" <s:StringLiteral> "as" <id:Identifier> ";" => Import::GlobalSymbol(s, id),
    "import" "*" "as" <id:Identifier> "from" <s:StringLiteral> ";" => Import::GlobalSymbol(s, id),
    "import" "{" <rename:CommaOne<ImportRename>> "}" "from" <s:StringLiteral> ";" => {
        Import::Rename(s, rename)
    }
}

ImportRename: (Identifier, Option<Identifier>) = {
    <Identifier> => (<>, None),
    <from:Identifier> "as" <to:Identifier> => (from, Some(to)),
}


DocComments: Vec<DocComment> = {
    SingleDocComment* => tags(&<>)
}

SingleDocComment: (usize, CommentType, &'input str)= {
    <l:@L> <c:DocComment> => (l, c.0, c.1)
}

Type: Type = {
    "bool" => Type::Bool,

    "string" => Type::String,

    Uint => Type::Uint(<>),
    Int => Type::Int(<>),
    Bytes => Type::Bytes(<>),
}

ArrayDimension: Option<Expression> = {
    "[" "]" => None,
    "[" <Expression> "]" => Some(<>)
}



Identifier: Identifier = {
    <l:@L> <n:LexIdentifier> <r:@R> => Identifier{loc: Loc(file_no, l, r), name: n.to_string()}
}

VariableDeclaration: VariableDeclaration = {
    <l:@L> <ty:Precedence0> <name:Identifier> <r:@R> => VariableDeclaration {
        loc: Loc(file_no, l, r), ty, name
    },
}

DataDefinition: Box<DataDefinition> = {
    <doc:DocComments> <l:@L> "data" <name:Identifier> "{" <fields:(<VariableDeclaration> ";")*> "}" <r:@R> => {
        Box::new(DataDefinition{loc: Loc(file_no, l, r), doc, name, fields})
    }
}

StructTy: StructTy = {
    <l:@L> "struct" <r:@R> => StructTy::Struct(Loc(file_no, l, r)),
    <l:@L> "interface" <r:@R> => StructTy::Interface(Loc(file_no, l, r)),
    <l:@L> "library" <r:@R> => StructTy::Library(Loc(file_no, l, r)),
}

StructPart: StructPart = {
    DataDefinition => StructPart::DataDefinition(<>),
    EnumDefinition => StructPart::EnumDefinition(<>),
    StructVariableDefinition => StructPart::StructVariableDefinition(<>),
    FunctionDefinition => StructPart::FunctionDefinition(<>),

}

Bases: Vec<Base> = {
    => Vec::new(),
    "is" <CommaOne<Base>> => <>,
}

Base: Base = {
    <l:@L> <name:Identifier> <args:("(" <Comma<Expression>> ")")?> <r:@R> => Base {
        loc: Loc(file_no, l, r),
        name,
        args
    }
}

StructDefinition: Box<StructDefinition> = {
    <doc:DocComments> <l:@L> <ty:StructTy> <name:Identifier> <base:Bases>
    "{" <parts:(<StructPart>)*> "}" <r:@R> => {
        Box::new(StructDefinition{doc, loc: Loc(file_no, l, r), ty, name, base, parts})
    }
}

EnumDefinition: Box<EnumDefinition> = {
    <doc:DocComments> <l:@L> "enum" <name:Identifier> "{" <values:Comma<Identifier>> "}" <r:@R> => {
        Box::new(EnumDefinition{loc: Loc(file_no, l, r), doc, name, values})
    }
}

StructVariableDefinition: Box<StructVariableDefinition> = {
    <doc:DocComments> <l:@L> <ty:Precedence0> <attrs:VariableAttribute*> <name:Identifier> <e:("=" <Expression>)?> <r:@R>";" => {
        Box::new(StructVariableDefinition{
            doc, loc: Loc(file_no, l, r), ty, attrs, name, initializer: e,
        })
    }
}

Visibility: Visibility = {
    <l:@L> "public" <r:@R> => Visibility::Public(Loc(file_no, l, r)),
    <l:@L> "private" <r:@R> => Visibility::Private(Loc(file_no, l, r)),
}

VariableAttribute: VariableAttribute = {
    Visibility => VariableAttribute::Visibility(<>),
    <l:@L> "constant" <r:@R> => VariableAttribute::Constant(Loc(file_no, l, r))
}

Expression: Expression = {
    Precedence15,
}

Precedence15: Expression = {
    <l:Precedence13> <a:@L> "=" <b:@R> <r:Precedence15> => Expression::Assign(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "|=" <b:@R> <r:Precedence15> => Expression::AssignOr(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "^=" <b:@R> <r:Precedence15> => Expression::AssignXor(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "&=" <b:@R> <r:Precedence15> => Expression::AssignAnd(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "<<=" <b:@R> <r:Precedence15> => Expression::AssignShiftLeft(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> ">>=" <b:@R> <r:Precedence15> => Expression::AssignShiftRight(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "+=" <b:@R> <r:Precedence15> => Expression::AssignAdd(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "-=" <b:@R> <r:Precedence15> => Expression::AssignSubtract(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "*=" <b:@R> <r:Precedence15> => Expression::AssignMultiply(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "/=" <b:@R> <r:Precedence15> => Expression::AssignDivide(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence13> <a:@L> "%=" <b:@R> <r:Precedence15> => Expression::AssignModulo(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence13,
}



Precedence13: Expression = {
    <l:Precedence13> <a:@L> "||" <b:@R> <r:Precedence12> => Expression::Or(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence12,
}

Precedence12: Expression = {
    <l:Precedence12> <a:@L> "&&" <b:@R> <r:Precedence11> => Expression::And(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence11,
}

Precedence11: Expression = {
    <l:Precedence11> <a:@L> "==" <b:@R> <r:Precedence10> => Expression::Equal(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence11> <a:@L> "!=" <b:@R> <r:Precedence10> => Expression::NotEqual(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence10,
}

Precedence10: Expression = {
    <l:Precedence10> <a:@L> "<" <b:@R> <r:Precedence9> => Expression::Less(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence10> <a:@L> ">" <b:@R> <r:Precedence9> => Expression::More(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence10> <a:@L> "<=" <b:@R> <r:Precedence9> => Expression::LessEqual(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence10> <a:@L> ">=" <b:@R> <r:Precedence9> => Expression::MoreEqual(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence9,
}

Precedence9: Expression = {
    <l:Precedence9> <a:@L> "|" <b:@R> <r:Precedence8> => Expression::BitwiseOr(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence8,
}

Precedence8: Expression = {
    <l:Precedence8> <a:@L> "^" <b:@R> <r:Precedence7> => Expression::BitwiseXor(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence7,
}

Precedence7: Expression = {
    <l:Precedence7> <a:@L> "&" <b:@R> <r:Precedence6> => Expression::BitwiseAnd(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence6,
}

Precedence6: Expression = {
    <l:Precedence6> <a:@L> "<<" <b:@R> <r:Precedence5> => Expression::ShiftLeft(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence6> <a:@L> ">>" <b:@R> <r:Precedence5> => Expression::ShiftRight(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence5,
}

Precedence5: Expression = {
    <l:Precedence5> <a:@L> "+" <b:@R> <r:Precedence4> => Expression::Add(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence5> <a:@L> "-" <b:@R> <r:Precedence4> => Expression::Subtract(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence4,
}

Precedence4: Expression = {
    <l:Precedence4> <a:@L> "*" <b:@R> <r:Precedence3> => Expression::Multiply(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence4> <a:@L> "/" <b:@R> <r:Precedence3> => Expression::Divide(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    <l:Precedence4> <a:@L> "%" <b:@R> <r:Precedence3> => Expression::Modulo(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence3,
}

Precedence3: Expression = {
    <l:Precedence3> <a:@L> "**" <b:@R> <r:Precedence2> => Expression::Power(Loc(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence2,
}

Precedence2: Expression = {
    <a:@L> "!" <b:@R> <e:Precedence2> => Expression::Not(Loc(file_no, a, b), Box::new(e)),
    <a:@L> "+" <b:@R> <e:Precedence2> => Expression::UnaryPlus(Loc(file_no, a, b), Box::new(e)),
    <a:@L> "-" <b:@R> <e:Precedence2> => Expression::UnaryMinus(Loc(file_no, a, b), Box::new(e)),
    Precedence0,
}

NamedArgument: NamedArgument = {
    <l:@L> <name:Identifier> ":" <expr:Expression> <r:@R> => {
        NamedArgument{ loc: Loc(file_no, l, r), name, expr }
    }
}

FunctionCall: Expression = {
    <a:@L> <i:Precedence0> "(" <v:Comma<Expression>> ")" <b:@R> => {
        Expression::FunctionCall(Loc(file_no, a, b), Box::new(i), v)
    },
    <i:Precedence0> <l:@L> <block:BlockStatement> <r:@R> => {
        Expression::FunctionCallBlock(Loc(file_no, l, r), Box::new(i), Box::new(block))
    },
    <a:@L> <i:Precedence0> "(" "{" <v:Comma<NamedArgument>> "}" ")" <b:@R> => {
        Expression::NamedFunctionCall(Loc(file_no, a, b), Box::new(i), v)
    },
}

Precedence0: Expression = {
    <FunctionCall> => <>,
    <a:@L> <e:Precedence0> "[" <i:Expression?> "]" <b:@R> => Expression::ArraySubscript(Loc(file_no, a, b), Box::new(e), box_option(i)),
    <a:@L> <e:Precedence0> "." <i:Identifier> <b:@R> => Expression::MemberAccess(Loc(file_no, a, b), Box::new(e), i),
    // Solidity has ".address" members on external function types. Address is a keyword, so special casing needed

    <a:@L> "true" <b:@R> => Expression::BoolLiteral(Loc(file_no, a, b), true),
    <a:@L> "false" <b:@R> => Expression::BoolLiteral(Loc(file_no, a, b), false),
    <StringLiteral+> => Expression::StringLiteral(<>),

    <l:@L> <ty:Type> <r:@R> => Expression::Type(Loc(file_no, l, r), ty),
    <a:@L> "[" <v:CommaOne<Expression>> "]" <b:@R> => {
        Expression::ArrayLiteral(Loc(file_no, a, b), v)
    },
    <Identifier> => Expression::Variable(<>),

    <l:@L> <a:ParameterList> <r:@R> => {
        if a.len() == 1 {
            if let Some(Parameter{ ty,  name: None, .. }) = &a[0].1 {
                // this means "(" Expression ")"
                return ty.clone();
            }
        }

        Expression::List(Loc(file_no, l, r), a)
    },
}



StringLiteral: StringLiteral = {
    <l:@L> <s:LexStringLiteral> <r:@R> => {
        StringLiteral{ loc: Loc(file_no, l, r), string: s.to_string() }
    }
}

// A parameter list is used for function arguments, returns, and destructuring statements.
// In destructuring statements, parameters can be optional. So, we make parameters optional
// and as an added bonus we can generate error messages about missing parameters/returns
// to functions
Parameter: Parameter = {
    <l:@L> <ty:Expression>  <name:Identifier?> <r:@R> => {
        let loc = Loc(file_no, l, r);
        Parameter{loc, ty,  name}
    }
}

OptParameter: (Loc, Option<Parameter>) = {
    <l:@L> <p:Parameter?> <r:@R> => (Loc(file_no, l, r), p),
}

ParameterList: Vec<(Loc, Option<Parameter>)> = {
    "(" ")" => Vec::new(),
    "(" <l:@L> <p:Parameter> <r:@R> ")" => vec!((Loc(file_no, l, r), Some(p))),
    "(" <CommaTwo<OptParameter>> ")" => <>,
}

StateMutability: StateMutability = {
    <l:@L> "pure" <r:@R> => StateMutability::Pure(Loc(file_no, l, r)),
    <l:@L> "view" <r:@R> => StateMutability::View(Loc(file_no, l, r)),
    <l:@L> "payable" <r:@R> => StateMutability::Payable(Loc(file_no, l, r)),
}

FunctionAttribute: FunctionAttribute = {
    StateMutability => FunctionAttribute::StateMutability(<>),
    Visibility => FunctionAttribute::Visibility(<>),
    <l:@L> "virtual" <r:@R> => FunctionAttribute::Virtual(Loc(file_no, <>)),
}

// Modifier has special case
FunctionTy: FunctionTy = {
    "constructor" => FunctionTy::Constructor,
    "function" => FunctionTy::Function,
}

BlockStatementOrSemiColon: Option<Statement> = {
    <@L> <@R> ";" => None,
    BlockStatement => Some(<>),
}


FunctionDefinition: Box<FunctionDefinition> = {
    <doc:DocComments> <l:@L> <ty:FunctionTy> <nl:@L> <name:Identifier?> <nr:@R> <params:ParameterList>
    <attributes:FunctionAttribute*>
    <returns:("returns" <ParameterList>)?> <body:BlockStatementOrSemiColon> <r:@R> => {
        let returns = returns.unwrap_or(Vec::new());

        Box::new(FunctionDefinition{
            doc,
            loc: Loc(file_no, l, r),

            name,
            name_loc: Loc(file_no, nl, nr),
            params,
            attributes,
            returns,
            body,
        })
    },
}

BlockStatement: Statement = {
    <l:@L> "{" <s:Statement*> "}" <r:@R> => Statement::Block(Loc(file_no, l, r), s),
    <l:@L> "{" <v:CommaOne<NamedArgument>> "}" <r:@R> => Statement::Args(Loc(file_no, l, r), v),
}

OpenStatement: Statement = {
    <l:@L> "if" "(" <cond:Expression> ")" <body:Statement> <r:@R> => {
        Statement::If(Loc(file_no, l, r), cond, Box::new(body), None)
    },
    <l:@L> "if" "(" <cond:Expression> ")" <body:ClosedStatement> "else" <o:OpenStatement> <r:@R> => {
        Statement::If(Loc(file_no, l, r), cond, Box::new(body), Some(Box::new(o)))
    },
    <l:@L> "while" "(" <e:Expression> ")" <b:OpenStatement> <r:@R> => {
        Statement::While(Loc(file_no, l, r), e, Box::new(b))
    }
}

ClosedStatement: Statement = {
    NonIfStatement,
    <l:@L> "if" "(" <cond:Expression> ")" <body:ClosedStatement> "else" <o:ClosedStatement> <r:@R> => {
        Statement::If(Loc(file_no, l, r), cond, Box::new(body), Some(Box::new(o)))
    },
    <l:@L> "while" "(" <e:Expression> ")" <b:ClosedStatement> <r:@R> => {
        Statement::While(Loc(file_no, l, r), e, Box::new(b))
    },
    <l:@L> "for" "(" <b:SimpleStatement?> ";" <c:Expression?> ";" <n:SimpleStatement?> ")" <block:ClosedStatement> <r:@R> => {
        Statement::For(Loc(file_no, l, r), box_option(b), box_option(c), box_option(n), Some(Box::new(block)))
    },
    <l:@L> "for" "(" <b:SimpleStatement?> ";" <c:Expression?> ";" <n:SimpleStatement?> ")" ";" <r:@R> => {
        Statement::For(Loc(file_no, l, r), box_option(b), box_option(c), box_option(n), None)
    }
}

Statement: Statement = {
    OpenStatement,
    ClosedStatement
}

SimpleStatement: Statement = {
    <l:@L>  <v:VariableDeclaration> <e:("=" <Expression>)?> <r:@R> => {
        Statement::VariableDefinition(Loc(file_no, l, r), v, e)
    },
    <l:@L> <e:Expression> <r:@R> => {
        Statement::Expression(Loc(file_no, l, r), e)
    }
}

NonIfStatement: Statement = {
    BlockStatement => <>,
    <SimpleStatement> ";" => <>,
    <l:@L>"do" <b:Statement> "while" "(" <e:Expression> ")" <r:@R> ";" => {
        Statement::DoWhile(Loc(file_no, l, r), Box::new(b), e)
    },
    <l:@L> "continue" <r:@R> ";" => {
        Statement::Continue(Loc(file_no, l, r))
    },
    <l:@L> "break" <r:@R> ";" => {
        Statement::Break(Loc(file_no, l, r))
    },
    <l:@L> "return" <r:@R> ";" => {
        Statement::Return(Loc(file_no, l, r), None)
    },
    <l:@L> "return" <e:Expression> <r:@R> ";" => {
        Statement::Return(Loc(file_no, l, r), Some(e))
    },
}

Comma<T>: Vec<T> = {
    => Vec::new(),
    CommaOne<T> => <>,
};

CommaOne<T>: Vec<T> = {
    <e:T> <v:("," <T>)*>  => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

CommaTwo<T>: Vec<T> = {
    <e:T> <v:("," <T>)+>  => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        LexIdentifier => Token::Identifier(<&'input str>),
        LexStringLiteral => Token::StringLiteral(<&'input str>),
        LexNumber => Token::Number(<&'input str>),
        ";" => Token::Semicolon,
        "{" => Token::OpenCurlyBrace,
        "}" => Token::CloseCurlyBrace,
        "(" => Token::OpenParenthesis,
        ")" => Token::CloseParenthesis,
        "=" => Token::Assign,
        "==" => Token::Equal,
        "=>" => Token::Arrow,
        "|=" => Token::BitwiseOrAssign,
        "^=" => Token::BitwiseXorAssign,
        "&=" => Token::BitwiseAndAssign,
        "<<=" => Token::ShiftLeftAssign,
        ">>=" => Token::ShiftRightAssign,
        "+=" => Token::AddAssign,
        "-=" => Token::SubtractAssign,
        "*=" => Token::MulAssign,
        "/=" => Token::DivideAssign,
        "%=" => Token::ModuloAssign,
        "?" => Token::Question,
        ":" => Token::Colon,
        "||" => Token::Or,
        "&&" => Token::And,
        "!=" => Token::NotEqual,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        ">" => Token::More,
        ">=" => Token::MoreEqual,
        "|" => Token::BitwiseOr,
        "&" => Token::BitwiseAnd,
        "^" => Token::BitwiseXor,
        "<<" => Token::ShiftLeft,
        ">>" => Token::ShiftRight,
        "+" => Token::Add,
        "-" => Token::Subtract,
        "*" => Token::Mul,
        "/" => Token::Divide,
        "%" => Token::Modulo,
        "**" => Token::Power,
        "!" => Token::Not,
        "~" => Token::Complement,
        "++" => Token::Increment,
        "--" => Token::Decrement,
        "[" => Token::OpenBracket,
        "]" => Token::CloseBracket,
        "." => Token::Member,
        "," => Token::Comma,
        DocComment => Token::DocComment(<CommentType>, <&'input str>),
        Uint => Token::Uint(<u16>),
        Int => Token::Int(<u16>),
        Bytes => Token::Bytes(<u8>),
        "data" => Token::Data,

        "import" => Token::Import,
        "struct" => Token::Struct,

        "bool" => Token::Bool,

        "string" => Token::String,

        "interface" => Token::Interface,
        "library" => Token::Library,

        "enum" => Token::Enum,
        "public" => Token::Public,
        "private" => Token::Private,

        "constant" => Token::Constant,
        "true" => Token::True,
        "false" => Token::False,
        "pure" => Token::Pure,
        "view" => Token::View,
        "payable" => Token::Payable,
        "constructor" => Token::Constructor,
        "function" => Token::Function,
        "return" => Token::Return,
        "returns" => Token::Return,
        "if" => Token::If,
        "for" => Token::For,
        "while" => Token::While,
        "else" => Token::Else,
        "do" => Token::Do,
        "continue" => Token::Continue,
        "break" => Token::Break,
        "emit" => Token::Emit,

        "as" => Token::As,
        "from" => Token::From,
        "is" => Token::Is,
        "virtual" => Token::Virtual,
    }
}
